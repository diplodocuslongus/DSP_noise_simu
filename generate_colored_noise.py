# ref:
# https://en.wikipedia.org/wiki/Pink_noise

# https://stackoverflow.com/questions/67085963/generate-colors-of-noise-in-python
# https://stackoverflow.com/questions/73257113/should-i-divide-by-f-or-sqrtf-to-generate-pink-noise
# Pink noise can be computer-generated by first generating a white noise signal, Fourier-transforming it, then dividing the amplitudes of the different frequency components by the square root of the frequency (in one dimension), or by the frequency (in two dimensions) etc.
# and also :
# https://github.com/felixpatzelt/colorednoise
# about underscores in numbers: https://stackoverflow.com/questions/54009778/what-do-underscores-in-a-number-mean

import numpy as np
import matplotlib.pyplot as plt

#pink_noise()
#plt.style.use('dark_background')
#plt.figure(figsize=(12, 8), tight_layout=True)
#plt.plot(pink_noise())
#plt.show()
NB_SAMPLE= 1000
SAMPLE_FREQ_HZ  = 125
SAMPLE_INTV_SEC = 1/SAMPLE_FREQ_HZ
def pink_noise(N = 1000):
    X_white = np.fft.rfft(np.random.randn(N)) # generate white noise 
    S = 1/np.where(X_white == 0, float('inf'), np.sqrt(X_white)) # divide the amplitude of the frequency components by 1/f for the pink noise
    #S = 1/np.where(np.fft.rfftfreq(N) == 0, float('inf'), np.sqrt(np.fft.rfftfreq(N)))

    #S = psd(np.fft.rfftfreq(N))
    # Normalize S
    S = S / np.sqrt(np.mean(S**2))
    X_shaped = X_white * S;
    return np.fft.irfft(X_shaped);
# plot time (ir spatial or other) domain
def plot_timedomain(ax_list,sample_count: int = None):
    n = sample_count if sample_count else 1000
    #fig, ax_list = plt.subplots(5, 1, figsize=(12, 8), tight_layout=True)
    i = 0
    for G, c, l in zip(
            [brownian_noise, pink_noise, white_noise, blue_noise, violet_noise],
            ['brown', 'hotpink', 'white', 'blue', 'violet'],
            ['brown', 'pink', 'white', 'blue', 'violet']):
        ax = ax_list[i]
        #t = [x*SAMPLE_INTV_SEC for x in range(0, n)]
        dt = SAMPLE_INTV_SEC
        t=np.arange(0,n*dt,dt)

        ax.plot(t, G(n), color=c, linewidth=0.5, label=l)
        ax.legend(loc='lower left')
        ax.set_xlabel("Time [sec]")
        i += 1
    #plt.suptitle(f"Colored Noise (n={n} points; sampling rate = {SAMPLE_FREQ_HZ}Hz)")
    #plt.show()
    return ax_list

def plot_spectrum_ax(ax,s):
    f = np.fft.rfftfreq(len(s))
    return ax.loglog(f, np.abs(np.fft.rfft(s)))[0]
def plot_spectrum(s):
    f = np.fft.rfftfreq(len(s))
    return plt.loglog(f, np.abs(np.fft.rfft(s)))[0]

def noise_psd(N, psd = lambda f: 1):
        X_white = np.fft.rfft(np.random.randn(N));
        S = psd(np.fft.rfftfreq(N))
        # Normalize S
        S = S / np.sqrt(np.mean(S**2))
        X_shaped = X_white * S;
        return np.fft.irfft(X_shaped);

def PSDGenerator(f):
    return lambda N: noise_psd(N, f)

@PSDGenerator
def white_noise(f):
    return 1;

@PSDGenerator
def blue_noise(f):
    return np.sqrt(f);

@PSDGenerator
def violet_noise(f):
    return f;

@PSDGenerator
def brownian_noise(f):
    return 1/np.where(f == 0, float('inf'), f)

@PSDGenerator
def pink_noise(f):
    return 1/np.where(f == 0, float('inf'), np.sqrt(f))


plt.style.use('dark_background')
#plt.figure(figsize=(12, 8), tight_layout=True)
f, axarr = plt.subplots(6, sharex=False) # do not use sharex or x axis for time domain will be log as well (would be unusual)
for G, c in zip(
        [brownian_noise, pink_noise, white_noise, blue_noise, violet_noise], 
        ['brown', 'hotpink', 'white', 'blue', 'violet']):
    plot_spectrum_ax(axarr[0],G(30*50_000)).set(color=c, linewidth=3) # the underscore is just to separate the group of zeros.
axarr[0].set_title('Reference Acceleration X')
axarr[0].set_ylabel('ang. vel. (rad/s)', fontsize=10)
axarr[0].set_ylim([1e-3, None]);
axarr[0].grid()
axarr[0].legend()
plot_timedomain(axarr[1:])

f2, ax = plt.subplots(1, sharex=False) # do not use sharex or x axis for time domain will be log as well (would be unusual)
dt = SAMPLE_INTV_SEC
t=np.arange(0,NB_SAMPLE*dt,dt)
ax.plot(t,pink_noise(NB_SAMPLE))
plt.show()
#plt.style.use('dark_background')
#plt.figure(figsize=(12, 8), tight_layout=True)
#for G, c in zip(
#        [brownian_noise, pink_noise, white_noise, blue_noise, violet_noise], 
#        ['brown', 'hotpink', 'white', 'blue', 'violet']):
#    plot_spectrum(G(30*50_000)).set(color=c, linewidth=3)
#plt.legend(['brownian', 'pink', 'white', 'blue', 'violet'])
#plt.suptitle("Colored Noise");
#plt.ylim([1e-3, None]);
#plt.show()
